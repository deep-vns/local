enabled: true
ingressGateway: ingressgateway
oidc: oidc-proxy-provider-fes
mobiSvc: mobi-service
gateways:
  fes-gw:
    hosts:
    - sea-fes-backend.fareye.co
    - sea-k8s.fareye.co
    tls: fareye-co-tls
virtualServices:
  mobi-vs:
    enabled: true
  ci-vs:
    enabled: true
  returns-vs:
    enabled: true
  minio-vs:
    enabled: true
  roster-vs:
    enabled: true
  sas-vs:
    enabled: true
  parcel-api-vs:
    enabled: true
authPolicy:
  enabled: true
  policies:
    mobi-auth-policy-custom:
      hosts: [ "sea-k8s.fareye.co" ]

istio-ingress:
  enabled: true
  gateways:
    istio-ingressgateway:
      name: istio-ingressgateway
      labels:
        app: istio-ingressgateway
        istio: ingressgateway
      cpu:
        targetAverageUtilization: 70
      memory:
        targetAverageUtilization: 70
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
        limits:
          cpu: 400m
          memory: 512Mi
      type: NodePort
      rollingMaxSurge: 100%
      rollingMaxUnavailable: 25%
      autoscaleEnabled: true
      autoscaleMin: 2
      autoscaleMax: 4
      serviceAnnotations:
        service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "900"
        alb.ingress.kubernetes.io/healthcheck-path: /healthz/ready
        alb.ingress.kubernetes.io/healthcheck-port: "status-port"
      nodeSelector: {}
      tolerations: []

  global:
    # Used to locate istiod.
    istioNamespace: istio-system
istio-ratelimit:
  enabled: false
  istioIngress:
    labelSelector:
      istio: ingressgateway
  replicaCount: 1
  imagePullSecrets:
  - name: acr-credential
  config:
    LOG_LEVEL: debug
    REDIS_SOCKET_TYPE: tcp
    REDIS_URL: redis-istio-ratelimit-master:6379
    USE_STATSD: "false"
    RUNTIME_ROOT: /data
    RUNTIME_SUBDIRECTORY: ratelimit
    RUNTIME_WATCH_ROOT: "false"
    RUNTIME_IGNOREDOTFILES: "true"
    HOST: "::"
    GRPC_HOST: "::"
  resources:
    requests:
      memory: "200Mi"
      cpu: "200m"
    limits:
      memory: "800Mi"
      cpu: "1000m"
  nodeSelector: {}
  tolerations: []
  affinity: {}
  rateLimitConfig:
    # A domain is a container for a set of rate limits. All domains known to the Ratelimit service must be globally unique. 
    domain: edge_proxy_per_ip
    # A descriptor is a list of key/value pairs owned by a domain that the Ratelimit service uses to select the correct rate limit to use when limiting. 
    # Descriptors are case-sensitive
    descriptors:
    - key: remote_address
      rate_limit:
        unit: second #<second, minute, hour, day>
        requests_per_unit: 200 #<uint>
    # Black list IP
    - key: remote_address
      value: 50.0.0.5
      rate_limit:
        unit: second
        requests_per_unit: 0
  envoyFilter:
    #The filterâ€™s behaviour in case the rate limiting service does not respond back. 
    #When it is set to true, Envoy will not allow traffic in case of communication failure 
    #between rate limiting service and the proxy.
    failure_mode_deny: false
    #The timeout in milliseconds for the rate limit service RPC
    timeout: 200ms
    rateLimitActions:
    # Matches based on the client's IP address (source address)
    # {}: No additional parameters required.
    - remote_address: {}
